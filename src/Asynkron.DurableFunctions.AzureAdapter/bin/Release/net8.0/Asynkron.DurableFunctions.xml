<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Asynkron.DurableFunctions</name>
    </assembly>
    <members>
        <member name="T:Asynkron.DurableFunctions.Attributes.FunctionAttribute">
            <summary>
            Specifies that a method is a function in our framework.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Attributes.FunctionAttribute.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Attributes.FunctionAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Attributes.FunctionAttribute"/> class.
            </summary>
            <param name="name">The name of the function.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Attributes.FunctionNameAttribute">
            <summary>
            Specifies the name of the function.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Attributes.FunctionNameAttribute.Name">
            <summary>
            Gets the name of the function.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Attributes.FunctionNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Attributes.FunctionNameAttribute"/> class.
            </summary>
            <param name="name">The name of the function.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Attributes.FunctionTriggerAttribute">
            <summary>
            Specifies that a parameter should be treated as a function trigger in our framework.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Attributes.FunctionTriggerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Attributes.FunctionTriggerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Attributes.OrchestrationTriggerAttribute">
            <summary>
            Specifies that a parameter should be treated as an orchestration trigger.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Attributes.OrchestrationTriggerAttribute.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Attributes.OrchestrationTriggerAttribute"/> class.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.BasicChaosAgent">
            <summary>
            Basic implementation of <see cref="T:Asynkron.DurableFunctions.Chaos.IChaosAgent"/> for chaos engineering scenarios.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.BasicChaosAgent.#ctor(Microsoft.Extensions.Logging.ILogger{Asynkron.DurableFunctions.Chaos.BasicChaosAgent},System.Func{System.Double},System.Func{System.TimeSpan,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Chaos.BasicChaosAgent"/> class.
            </summary>
            <param name="logger">Optional logger for chaos operations.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.BasicChaosAgent.InjectLatencyAsync(System.String,System.TimeSpan,System.Double)">
            <summary>
            Injects latency into the specified operation based on probability.
            </summary>
            <param name="operation">The name of the operation.</param>
            <param name="delay">The delay to inject.</param>
            <param name="probability">The probability of injection (0.0 to 1.0).</param>
            <returns>A task that completes after potential delay injection.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.BasicChaosAgent.InjectFailureAsync(System.String,System.Exception,System.Double)">
            <summary>
            Injects a failure into the specified operation based on probability.
            </summary>
            <param name="operation">The name of the operation.</param>
            <param name="exception">The exception to throw.</param>
            <param name="probability">The probability of injection (0.0 to 1.0).</param>
            <returns>A task that may throw the specified exception.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.BasicChaosAgent.InjectResourceExhaustionAsync(Asynkron.DurableFunctions.Chaos.ResourceType,System.TimeSpan)">
            <summary>
            Simulates resource exhaustion for testing purposes.
            </summary>
            <param name="resource">The type of resource to exhaust.</param>
            <param name="duration">The duration of the exhaustion.</param>
            <returns>A task that completes after simulating resource exhaustion.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.BasicChaosAgent.InjectNetworkPartitionAsync(System.TimeSpan)">
            <summary>
            Simulates a network partition by introducing significant delays.
            </summary>
            <param name="duration">The duration of the partition.</param>
            <returns>A task that completes after simulating the network partition.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.ChaosConfiguration">
            <summary>
            Configuration settings for chaos engineering scenarios.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.Enabled">
            <summary>
            Gets or sets a value indicating whether chaos engineering is enabled.
            Default is false for production safety.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.Environment">
            <summary>
            Gets or sets the environment name. Chaos is automatically disabled in production environments for safety.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.DefaultLatencyProbability">
            <summary>
            Gets or sets the default probability for latency injection (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.DefaultFailureProbability">
            <summary>
            Gets or sets the default probability for failure injection (0.0 to 1.0).
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.DefaultLatencyDelay">
            <summary>
            Gets or sets the default latency delay for chaos injection.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.ResourceExhaustionEnabled">
            <summary>
            Gets or sets a value indicating whether resource exhaustion chaos is enabled.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.NetworkPartitionEnabled">
            <summary>
            Gets or sets a value indicating whether network partition chaos is enabled.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.MaxResourceExhaustionDuration">
            <summary>
            Gets or sets the maximum duration for resource exhaustion scenarios.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.ChaosConfiguration.IsValidAndSafe">
            <summary>
            Validates the configuration and ensures production safety.
            </summary>
            <returns>True if the configuration is valid and safe to use.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.ChaosExecutionMiddleware">
            <summary>
            Execution middleware that injects chaos faults when orchestrators or activities execute.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.ChaosSchedulingMiddleware">
            <summary>
            Scheduling middleware that injects chaos faults when durable state is persisted.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.IChaosAgent">
            <summary>
            Defines the contract for chaos engineering agents that inject failures into the system.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.IChaosAgent.InjectLatencyAsync(System.String,System.TimeSpan,System.Double)">
            <summary>
            Injects latency into the specified operation.
            </summary>
            <param name="operation">The name of the operation to inject latency into.</param>
            <param name="delay">The amount of delay to inject.</param>
            <param name="probability">The probability (0.0 to 1.0) that the latency will be injected. Default is 1.0 (always).</param>
            <returns>A task that completes after potentially injecting the latency.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.IChaosAgent.InjectFailureAsync(System.String,System.Exception,System.Double)">
            <summary>
            Injects a failure into the specified operation.
            </summary>
            <param name="operation">The name of the operation to inject failure into.</param>
            <param name="exception">The exception to throw when the failure is injected.</param>
            <param name="probability">The probability (0.0 to 1.0) that the failure will be injected. Default is 1.0 (always).</param>
            <returns>A task that completes after potentially injecting the failure.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.IChaosAgent.InjectResourceExhaustionAsync(Asynkron.DurableFunctions.Chaos.ResourceType,System.TimeSpan)">
            <summary>
            Injects resource exhaustion simulation.
            </summary>
            <param name="resource">The type of resource to exhaust.</param>
            <param name="duration">The duration of the resource exhaustion.</param>
            <returns>A task that completes after simulating resource exhaustion.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.IChaosAgent.InjectNetworkPartitionAsync(System.TimeSpan)">
            <summary>
            Injects a network partition simulation.
            </summary>
            <param name="duration">The duration of the network partition.</param>
            <returns>A task that completes after simulating the network partition.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.Providers.IDatabaseChaosProvider">
            <summary>
            Defines the contract for database-specific chaos engineering providers.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IDatabaseChaosProvider.InjectConnectionFailureAsync(System.String,System.Double)">
            <summary>
            Injects database connection failures.
            </summary>
            <param name="operation">The database operation being performed.</param>
            <param name="probability">The probability of failure (0.0 to 1.0).</param>
            <returns>A task that may throw a database connection exception.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IDatabaseChaosProvider.InjectQueryTimeoutAsync(System.String,System.TimeSpan)">
            <summary>
            Simulates query timeouts.
            </summary>
            <param name="operation">The query operation.</param>
            <param name="timeout">The timeout duration.</param>
            <returns>A task that may timeout.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IDatabaseChaosProvider.InjectConnectionPoolExhaustionAsync(System.TimeSpan)">
            <summary>
            Tests connection pool exhaustion.
            </summary>
            <param name="duration">The duration to maintain pool exhaustion.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IDatabaseChaosProvider.InjectTransactionRollbackAsync(System.String,System.Double)">
            <summary>
            Simulates transaction rollbacks.
            </summary>
            <param name="operation">The transaction operation.</param>
            <param name="probability">The probability of rollback (0.0 to 1.0).</param>
            <returns>A task that may throw a transaction exception.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.Providers.INetworkChaosProvider">
            <summary>
            Defines the contract for network-specific chaos engineering providers.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.INetworkChaosProvider.InjectLatencyAsync(System.TimeSpan)">
            <summary>
            Injects network latency.
            </summary>
            <param name="latency">The latency to inject.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.INetworkChaosProvider.InjectPacketLossAsync(System.Double,System.TimeSpan)">
            <summary>
            Simulates network packet loss.
            </summary>
            <param name="lossPercentage">The percentage of packets to drop (0-100).</param>
            <param name="duration">The duration of packet loss.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.INetworkChaosProvider.InjectPartitionAsync(System.TimeSpan)">
            <summary>
            Simulates a network partition.
            </summary>
            <param name="duration">The duration of the partition.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.INetworkChaosProvider.InjectTimeoutAsync(System.String)">
            <summary>
            Tests timeout handling by simulating network timeouts.
            </summary>
            <param name="operation">The operation to timeout.</param>
            <returns>A task that throws a timeout exception.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.Providers.IResourceChaosProvider">
            <summary>
            Defines the contract for resource-specific chaos engineering providers.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IResourceChaosProvider.InjectMemoryPressureAsync(System.Double,System.TimeSpan)">
            <summary>
            Simulates memory pressure.
            </summary>
            <param name="pressureLevel">The level of memory pressure (0.0 to 1.0).</param>
            <param name="duration">The duration of memory pressure.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IResourceChaosProvider.InjectCpuStressAsync(System.Double,System.TimeSpan)">
            <summary>
            Simulates CPU stress.
            </summary>
            <param name="cpuUsagePercentage">The target CPU usage percentage (0-100).</param>
            <param name="duration">The duration of CPU stress.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IResourceChaosProvider.InjectDiskIOConstraintsAsync(System.TimeSpan,System.TimeSpan)">
            <summary>
            Simulates disk I/O constraints.
            </summary>
            <param name="ioDelay">The delay to inject in I/O operations.</param>
            <param name="duration">The duration of I/O constraints.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.Providers.IResourceChaosProvider.InjectOutOfMemoryAsync(System.String)">
            <summary>
            Simulates out-of-memory conditions.
            </summary>
            <param name="operation">The operation during which to simulate OOM.</param>
            <returns>A task that throws an out-of-memory exception.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.ResourceType">
            <summary>
            Defines the types of system resources that can be exhausted for chaos testing.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Chaos.ResourceType.Memory">
            <summary>
            Memory resource exhaustion.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Chaos.ResourceType.Cpu">
            <summary>
            CPU resource exhaustion.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Chaos.ResourceType.DiskIO">
            <summary>
            Disk I/O resource exhaustion.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Chaos.ResourceType.NetworkBandwidth">
            <summary>
            Network bandwidth exhaustion.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Chaos.ResourceType.DatabaseConnections">
            <summary>
            Database connection pool exhaustion.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Chaos.SafeChaosAgent">
            <summary>
            Production-safe implementation of <see cref="T:Asynkron.DurableFunctions.Chaos.IChaosAgent"/> with configuration-based safety mechanisms.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.SafeChaosAgent.#ctor(Asynkron.DurableFunctions.Chaos.IChaosAgent,Asynkron.DurableFunctions.Chaos.ChaosConfiguration,Microsoft.Extensions.Logging.ILogger{Asynkron.DurableFunctions.Chaos.SafeChaosAgent})">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Chaos.SafeChaosAgent"/> class.
            </summary>
            <param name="innerAgent">The inner chaos agent to delegate to when chaos is enabled.</param>
            <param name="configuration">The chaos configuration.</param>
            <param name="logger">Optional logger for chaos operations.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.SafeChaosAgent.InjectLatencyAsync(System.String,System.TimeSpan,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.SafeChaosAgent.InjectFailureAsync(System.String,System.Exception,System.Double)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.SafeChaosAgent.InjectResourceExhaustionAsync(Asynkron.DurableFunctions.Chaos.ResourceType,System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Chaos.SafeChaosAgent.InjectNetworkPartitionAsync(System.TimeSpan)">
            <inheritdoc />
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions">
            <summary>
            Configuration options for Durable Functions.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions.Storage">
            <summary>
            Gets or sets the storage configuration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions.Runtime">
            <summary>
            Gets or sets the runtime configuration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions.Security">
            <summary>
            Gets or sets the security configuration.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.StorageOptions">
            <summary>
            Storage configuration options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.StorageOptions.Provider">
            <summary>
            Gets or sets the storage provider type.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.StorageOptions.PostgreSQL">
            <summary>
            Gets or sets the PostgreSQL-specific options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.StorageOptions.SQLite">
            <summary>
            Gets or sets the SQLite-specific options.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.PostgreSqlOptions">
            <summary>
            PostgreSQL storage provider options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.PostgreSqlOptions.ConnectionString">
            <summary>
            Gets or sets the PostgreSQL connection string.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.PostgreSqlOptions.RequireSsl">
            <summary>
            Gets or sets a value indicating whether SSL is required.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.PostgreSqlOptions.ValidateConnectivity">
            <summary>
            Gets or sets a value indicating whether to test connectivity during validation.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.SqliteOptions">
            <summary>
            SQLite storage provider options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SqliteOptions.ConnectionString">
            <summary>
            Gets or sets the SQLite connection string.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.RuntimeOptions">
            <summary>
            Runtime configuration options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.HostId">
            <summary>
            Gets or sets the unique host identifier.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.OrchestrationTimeout">
            <summary>
            Gets or sets the orchestration timeout.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.LeaseRenewalInterval">
            <summary>
            Gets or sets the lease renewal interval.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.LeaseTimeout">
            <summary>
            Gets or sets the lease timeout.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.PollingInterval">
            <summary>
            Gets or sets the polling interval.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.RuntimeOptions.MaxConcurrentOrchestrations">
            <summary>
            Gets or sets the maximum number of concurrent orchestrations.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.SecurityOptions">
            <summary>
            Security configuration options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SecurityOptions.MaxInputSize">
            <summary>
            Gets or sets the maximum input size in bytes.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SecurityOptions.MaxSerializationDepth">
            <summary>
            Gets or sets the maximum serialization depth.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SecurityOptions.ValidateInputs">
            <summary>
            Gets or sets a value indicating whether to validate inputs.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SecurityOptions.AllowedTypes">
            <summary>
            Gets or sets the allowed types for serialization.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.SecurityOptions.Database">
            <summary>
            Gets or sets the database security settings.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.DatabaseSecurityOptions">
            <summary>
            Database security configuration options.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DatabaseSecurityOptions.RequireSsl">
            <summary>
            Gets or sets a value indicating whether SSL is required for database connections.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DatabaseSecurityOptions.ValidateCertificates">
            <summary>
            Gets or sets a value indicating whether to validate certificates.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.DatabaseSecurityOptions.CommandTimeoutSeconds">
            <summary>
            Gets or sets the command timeout in seconds.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.StorageProvider">
            <summary>
            Storage provider types.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.StorageProvider.InMemory">
            <summary>
            In-memory storage provider.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.StorageProvider.SQLite">
            <summary>
            SQLite storage provider.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.StorageProvider.PostgreSQL">
            <summary>
            PostgreSQL storage provider.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.DurableFunctionsConfigurationValidator">
            <summary>
            Main configuration validator for Durable Functions.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.DurableFunctionsConfigurationValidator.ValidateConfiguration(Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions)">
            <summary>
            Validates the complete Durable Functions configuration.
            </summary>
            <param name="options">The configuration options to validate.</param>
            <returns>A validation result containing any errors, warnings, or info messages.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.DurableFunctionsConfigurationValidator.ValidateStorageConfiguration(Asynkron.DurableFunctions.Configuration.StorageOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates storage configuration settings.
            </summary>
            <param name="storage">The storage options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.DurableFunctionsConfigurationValidator.ValidateRuntimeConfiguration(Asynkron.DurableFunctions.Configuration.RuntimeOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates runtime configuration settings.
            </summary>
            <param name="runtime">The runtime options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.DurableFunctionsConfigurationValidator.ValidateSecurityConfiguration(Asynkron.DurableFunctions.Configuration.SecurityOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates security configuration settings.
            </summary>
            <param name="security">The security options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.RuntimeConfigurationValidator">
            <summary>
            Validator for runtime configuration settings.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.RuntimeConfigurationValidator.ValidateRuntimeConfiguration(Asynkron.DurableFunctions.Configuration.RuntimeOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates runtime configuration settings.
            </summary>
            <param name="options">The runtime options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.RuntimeConfigurationValidator.IsValidHostId(System.String)">
            <summary>
            Validates that the host ID contains only allowed characters.
            </summary>
            <param name="hostId">The host ID to validate.</param>
            <returns>True if the host ID is valid, false otherwise.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.SecurityConfigurationValidator">
            <summary>
            Validator for security configuration settings.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.SecurityConfigurationValidator.ValidateSecurityConfiguration(Asynkron.DurableFunctions.Configuration.SecurityOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates security configuration settings.
            </summary>
            <param name="options">The security options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.SecurityConfigurationValidator.ValidateDatabaseSecurityConfiguration(Asynkron.DurableFunctions.Configuration.DatabaseSecurityOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates database security configuration settings.
            </summary>
            <param name="options">The database security options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.StorageConfigurationValidator">
            <summary>
            Validator for storage configuration settings.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.StorageConfigurationValidator.ValidatePostgreSqlConfiguration(Asynkron.DurableFunctions.Configuration.PostgreSqlOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates PostgreSQL configuration settings.
            </summary>
            <param name="options">The PostgreSQL options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.StorageConfigurationValidator.ValidateSqliteConfiguration(Asynkron.DurableFunctions.Configuration.SqliteOptions,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Validates SQLite configuration settings.
            </summary>
            <param name="options">The SQLite options to validate.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.StorageConfigurationValidator.TestPostgreSqlConnectivity(System.String,Asynkron.DurableFunctions.Configuration.Validation.ValidationResult)">
            <summary>
            Tests PostgreSQL connectivity.
            </summary>
            <param name="connectionString">The connection string to test.</param>
            <param name="result">The validation result to populate.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult">
            <summary>
            Represents the result of configuration validation.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.Messages">
            <summary>
            Gets the list of validation messages.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.IsValid">
            <summary>
            Gets a value indicating whether the configuration is valid (no errors).
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.HasWarnings">
            <summary>
            Gets a value indicating whether there are any warnings.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.AddError(System.String)">
            <summary>
            Adds an error message to the validation result.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.AddWarning(System.String)">
            <summary>
            Adds a warning message to the validation result.
            </summary>
            <param name="message">The warning message.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.AddInfo(System.String)">
            <summary>
            Adds an informational message to the validation result.
            </summary>
            <param name="message">The informational message.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.ThrowIfInvalid">
            <summary>
            Throws a <see cref="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException"/> if the validation result contains errors.
            </summary>
            <exception cref="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException">Thrown when the configuration is invalid.</exception>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationResult.ToString">
            <summary>
            Returns a string representation of all validation messages.
            </summary>
            <returns>A formatted string containing all validation messages.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.ValidationMessage">
            <summary>
            Represents a validation message with a level and text.
            </summary>
            <param name="Level">The validation level.</param>
            <param name="Message">The validation message.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Configuration.Validation.ValidationMessage.#ctor(Asynkron.DurableFunctions.Configuration.Validation.ValidationLevel,System.String)">
            <summary>
            Represents a validation message with a level and text.
            </summary>
            <param name="Level">The validation level.</param>
            <param name="Message">The validation message.</param>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.Validation.ValidationMessage.Level">
            <summary>The validation level.</summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Configuration.Validation.ValidationMessage.Message">
            <summary>The validation message.</summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Configuration.Validation.ValidationLevel">
            <summary>
            Defines the severity levels for validation messages.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.Validation.ValidationLevel.Info">
            <summary>
            Informational message.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.Validation.ValidationLevel.Warning">
            <summary>
            Warning message indicating a potential issue.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Configuration.Validation.ValidationLevel.Error">
            <summary>
            Error message indicating a critical configuration problem.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.DurableFunctionRuntime">
            <summary>
            Represents the runtime for executing durable functions and orchestrations.
            This is the main entry point for registering functions and managing orchestration execution.
            </summary>
            <example>
            <code>
            var stateStore = new InMemoryStateStore();
            var runtime = new DurableFunctionRuntime(stateStore, logger);
            
            // Register a simple function
            runtime.RegisterFunction&lt;string, string&gt;("SayHello", async name =&gt; $"Hello, {name}!");
            
            // Register an orchestrator
            runtime.RegisterOrchestrator&lt;string, string&gt;("MyOrchestrator", async (context, input) =&gt;
            {
                var result = await context.CallAsync&lt;string&gt;("SayHello", input);
                return result;
            });
            
            // Start an orchestration
            await runtime.TriggerAsync("instance1", "MyOrchestrator", "World");
            
            // Run the runtime to process orchestrations
            using var cts = new CancellationTokenSource();
            await runtime.RunAndPollAsync(cts.Token);
            </code>
            </example>
            <remarks>
            The runtime provides thread-safe execution of durable functions with built-in support for:
            - Concurrent orchestrator execution with lease-based coordination
            - Automatic state persistence and recovery
            - Function call replay-safety for orchestrators
            - External event handling and timer support
            - Distributed execution across multiple hosts
            </remarks>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions">
            <summary>
            Configuration options for customizing the behavior of the DurableFunctionRuntime.
            These options control polling intervals, concurrency limits, error handling, and execution strategies.
            </summary>
            <example>
            <code>
            var options = new DurableFunctionRuntimeOptions
            {
                PollingIntervalMs = 500,           // Poll every 500ms
                MaxConcurrentFunctionExecutions = 20,  // Allow up to 20 concurrent executions
                MaxConsecutiveErrors = 5,          // Stop after 5 consecutive errors
                UseCooperativeYield = true         // Use cooperative yielding for better performance
            };
            
            var runtime = new DurableFunctionRuntime(stateStore, logger, options);
            </code>
            </example>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.PollingIntervalMs">
            <summary>
            Gets or sets the interval in milliseconds between polling operations when no work is available.
            </summary>
            <value>
            The polling interval in milliseconds. Default is 100ms for responsive execution.
            </value>
            <remarks>
            Lower values provide more responsive execution but increase CPU usage when idle.
            Higher values reduce CPU usage but may delay execution of scheduled functions.
            Consider your application's latency requirements when setting this value.
            </remarks>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.MaxConsecutiveErrors">
            <summary>
            Gets or sets the maximum number of consecutive errors before stopping the polling loop.
            </summary>
            <value>
            The maximum consecutive error count. Default is 10. Set to -1 for unlimited retries.
            </value>
            <remarks>
            This setting prevents runaway error conditions from consuming resources indefinitely.
            When the limit is reached, the runtime will stop polling and throw an exception.
            Set to -1 to disable error limiting, but ensure proper error handling in your functions.
            </remarks>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.UseCooperativeYield">
            <summary>
            Gets or sets whether to enable cooperative orchestration yielding using a custom task scheduler.
            </summary>
            <value>
            True to use cooperative yielding (default), false to use exception-based yielding.
            </value>
            <remarks>
            Cooperative yielding provides better performance and cleaner stack traces by using a custom task scheduler
            instead of exceptions for orchestration flow control. This is the recommended setting for production.
            Set to false only if you encounter compatibility issues or need to debug orchestration flow.
            </remarks>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.MaxConcurrentFunctionExecutions">
            <summary>
            Gets or sets the maximum number of functions that may execute concurrently.
            </summary>
            <value>
            The concurrency limit. Defaults to 4x processor count, clamped between 8 and 128.
            Set to 0 or negative values to disable concurrency limiting.
            </value>
            <remarks>
            This setting controls the maximum number of functions (both activities and orchestrators) 
            that can execute simultaneously. Higher values allow more concurrent execution but consume 
            more system resources. Lower values reduce resource usage but may limit throughput.
            
            The default calculation (4x processor count) provides a good balance for most scenarios.
            Consider your system's memory and I/O capacity when adjusting this value.
            </remarks>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.DefaultLeaseDuration">
            <summary>
            Gets or sets the default lease duration for concurrent orchestrator execution.
            If not specified, defaults to 5 minutes.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.HostId">
            <summary>
            Gets or sets the host ID for lease management in concurrent orchestrator execution.
            If not specified, defaults to Environment.MachineName + "-" + Environment.ProcessId.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.SchedulingMiddlewares">
            <summary>
            Gets the collection of scheduling middleware invoked before durable state is persisted.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.ExecutionMiddlewares">
            <summary>
            Gets the collection of execution middleware invoked when orchestrators and activities run.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions.TraceStateOperations">
            <summary>
            Enables tracing spans for state persistence operations (save/load/remove). Disabled by default to reduce noise.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.ErrorHandlingHelper">
            <summary>
            Helper class for consistent error handling and logging patterns.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ErrorHandlingHelper.LogExecutionError(Microsoft.Extensions.Logging.ILogger,System.Exception,System.String,System.String,System.String,System.String)">
            <summary>
            Logs a function execution error with consistent formatting.
            </summary>
            <param name="logger">The logger to use.</param>
            <param name="exception">The exception that occurred.</param>
            <param name="functionType">Type of function (e.g., "orchestrator", "function").</param>
            <param name="functionName">Name of the function.</param>
            <param name="instanceId">Instance ID of the execution.</param>
            <param name="input">Input data for the function.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ErrorHandlingHelper.ValidateNotNullOrEmpty(System.String,System.String)">
            <summary>
            Validates that a string parameter is not null or empty.
            </summary>
            <param name="value">The value to validate.</param>
            <param name="parameterName">Name of the parameter for error messages.</param>
            <exception cref="T:System.ArgumentException">Thrown when value is null, empty, or whitespace.</exception>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ErrorHandlingHelper.TryExecute(System.Action,Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Safely executes an action and logs any exceptions that occur.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="logger">The logger to use for error logging.</param>
            <param name="context">Context description for error logging.</param>
            <returns>True if the action succeeded, false if it failed.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ErrorHandlingHelper.TryExecuteAsync(System.Func{System.Threading.Tasks.Task},Microsoft.Extensions.Logging.ILogger,System.String)">
            <summary>
            Safely executes an async action and logs any exceptions that occur.
            </summary>
            <param name="action">The async action to execute.</param>
            <param name="logger">The logger to use for error logging.</param>
            <param name="context">Context description for error logging.</param>
            <returns>True if the action succeeded, false if it failed.</returns>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IFunctionContext.ParentInstanceId">
            <summary>
            Gets the parent instance ID associated with the function execution context.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IFunctionContext.InstanceId">
            <summary>
            Gets the instance ID of the function execution.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IFunctionContext.FunctionName">
            <summary>
            Gets the name of the function being executed.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.FunctionContext">
            <summary>
            Provides context for function execution in our framework.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.FunctionContext.ParentInstanceId">
            <summary>
            Gets the parent instance ID associated with the function execution context.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.FunctionContext.InstanceId">
            <summary>
            Gets the instance ID of the function execution.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.FunctionContext.FunctionName">
            <summary>
            Gets the name of the function being executed.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.FunctionContext.#ctor(Asynkron.DurableFunctions.Models.DurableStateDto,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Core.FunctionContext"/> class.
            </summary>
            <param name="stateDto">The durable state DTO containing function execution context.</param>
            <param name="logger">Optional logger for the function execution context.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.IOrchestrationClient">
            <summary>
            Client interface for managing orchestration instances.
            Provides operations for starting, querying, terminating, and managing orchestrations.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationClient.StartNewAsync(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <summary>
            Starts a new orchestration instance.
            </summary>
            <param name="orchestratorName">The name of the orchestrator function to start.</param>
            <param name="input">The input data for the orchestration.</param>
            <param name="instanceId">Optional custom instance ID. If not provided, one will be generated.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response containing the instance ID and management URLs.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationClient.GetStatusAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the status of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="showHistory">Whether to include execution history in the response.</param>
            <param name="showHistoryOutput">Whether to include output in the execution history.</param>
            <param name="showInput">Whether to include the input in the response.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The orchestration status, or null if not found.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <summary>
            Sends an external event to a running orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="eventName">The name of the event to send.</param>
            <param name="eventData">The event data to send.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the async operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationClient.TerminateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <summary>
            Terminates a running orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="reason">The reason for termination.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the async operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationClient.PurgeInstanceHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Purges the history of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response indicating the number of instances deleted.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.IOrchestrationContext">
            <summary>
            Defines the interface for a durable orchestration context.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IOrchestrationContext.FunctionName">
            <summary>
            Gets the name of the function associated with the current orchestration context.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IOrchestrationContext.ParentInstanceId">
            <summary>
            Gets the instance ID of the parent orchestration, if this orchestration was started by another orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IOrchestrationContext.InstanceId">
            <summary>
            Gets the instance ID of the orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Core.IOrchestrationContext.CurrentUtcDateTime">
            <summary>
            Gets the current date and time in UTC.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.CallAsync``1(System.String,System.Object)">
            <summary>
            Calls an activity function asynchronously.
            </summary>
            <typeparam name="TResult">The return type of the activity function.</typeparam>
            <param name="functionName">The name of the activity function to call.</param>
            <param name="input">The JSON Serializable input to pass to the activity function.</param>
            <returns>A task that represents the asynchronous operation. The task result contains the output of the activity function.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.CallAsync(System.String,System.Object)">
            <summary>
            Calls an activity function asynchronously without expecting a return value.
            </summary>
            <param name="functionName">The name of the activity function to call.</param>
            <param name="input">The input to pass to the activity function.</param>
            <returns>A task that represents the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.CreateTimer(System.DateTimeOffset)">
            <summary>
            Creates a timer that expires at the specified time.
            </summary>
            <param name="fireAt">The time when the timer should fire.</param>
            <returns>A task that completes when the timer expires.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.WaitForEvent``1(System.String)">
            <summary>
            Waits for an external event to be raised.
            </summary>
            <typeparam name="TResult">The type of the event data.</typeparam>
            <param name="name">The name of the event to wait for.</param>
            <returns>A task that completes when the event is raised. The task result contains the event data.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.GetInput``1">
            <summary>
            Gets the input to the orchestration, deserialized to the specified type.
            </summary>
            <typeparam name="T">The type to deserialize the input to.</typeparam>
            <returns>The deserialized input object.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.GetLogger">
            <summary>
            Gets a replay-safe logger for the orchestration context.
            </summary>
            <returns>A logger instance.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.IOrchestrationContext.GetLogger``1">
            <summary>
            Gets a replay-safe logger for the orchestration context scoped to <typeparamref name="TCategoryName"/>.
            </summary>
            <typeparam name="TCategoryName">The logging category to use.</typeparam>
            <returns>A typed logger instance.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.JsonSerializationHelper">
            <summary>
            Centralized JSON serialization helper to ensure consistent serialization behavior
            across the entire durable functions framework.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.Serialize(System.Object)">
            <summary>
            Serializes an object to JSON string using default options.
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>JSON string representation of the object.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.SerializeForState(System.Object)">
            <summary>
            Serializes an object to JSON string using state-specific options (for persistence).
            </summary>
            <param name="value">The object to serialize.</param>
            <returns>JSON string representation of the object for state storage.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.Deserialize``1(System.String)">
            <summary>
            Deserializes a JSON string to the specified type.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="json">The JSON string to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.DeserializeFromState``1(System.String)">
            <summary>
            Deserializes a JSON string to the specified type using state-specific options.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="json">The JSON string to deserialize.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.Deserialize(System.String,System.Type)">
            <summary>
            Deserializes a JSON string to the specified type (non-generic).
            </summary>
            <param name="json">The JSON string to deserialize.</param>
            <param name="type">The target type.</param>
            <returns>The deserialized object.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.SafeDeserialize``1(System.String,``0)">
            <summary>
            Safely deserializes a JSON string to the specified type with fallback to default value.
            </summary>
            <typeparam name="T">The target type.</typeparam>
            <param name="json">The JSON string to deserialize.</param>
            <param name="fallbackValue">The fallback value if deserialization fails.</param>
            <returns>The deserialized object or fallback value.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.SerializeInvocationResultAsync(System.Object)">
            <summary>
            Serializes the result of a task-based method invocation.
            Handles both Task and Task&lt;T&gt; return types.
            </summary>
            <param name="invocationResult">The result of method invocation.</param>
            <returns>JSON string representation of the result.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.JsonSerializationHelper.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type to get default value for.</param>
            <returns>Default value for the type.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.LeaseManager">
            <summary>
            Manages lease operations for durable orchestrator execution with concurrency control.
            Handles lease claiming, renewal, and release operations for orchestrator instances.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.LeaseManager.ExecuteWithLeaseAsync(Asynkron.DurableFunctions.Models.SchedulableInstance,System.Func{Asynkron.DurableFunctions.Models.DurableStateDto,System.Threading.Tasks.Task})">
            <summary>
            Executes an orchestrator with lease-based concurrency control.
            Claims a lease, executes the orchestrator, and ensures proper lease cleanup.
            </summary>
            <param name="instance">The schedulable instance information to execute.</param>
            <param name="executeOrchestrator">Function to execute the orchestrator with the loaded state.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.LeaseManager.ExecuteWithLeaseRetryAsync(System.String,System.Func{Asynkron.DurableFunctions.Models.DurableStateDto,System.Threading.Tasks.Task{Asynkron.DurableFunctions.Core.LeaseOperationResult}},System.Int32)">
            <summary>
            Executes an operation with lease acquisition on a specific orchestrator instance.
            Attempts multiple times with exponential backoff if lease is not available.
            </summary>
            <param name="instanceId">The instance ID to acquire lease for.</param>
            <param name="operation">Function to execute with the claimed lease and loaded state.</param>
            <param name="maxAttempts">Maximum number of lease acquisition attempts.</param>
            <returns>The result of the lease operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.LeaseManager.StartLeaseRenewalAsync(System.String,Asynkron.DurableFunctions.Models.OrchestratorLease,System.Threading.CancellationToken)">
            <summary>
            Starts a background task to periodically renew the lease for a long-running orchestrator.
            </summary>
            <param name="instanceId">The orchestrator instance ID.</param>
            <param name="lease">The current lease information.</param>
            <param name="cancellationToken">Token to cancel the renewal task.</param>
            <returns>A task representing the renewal operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.LeaseManager.ReleaseLeaseAsync(System.String,Asynkron.DurableFunctions.Models.OrchestratorLease)">
            <summary>
            Releases a lease for an orchestrator instance with proper error handling and logging.
            </summary>
            <param name="instanceId">The instance ID to release the lease for.</param>
            <param name="lease">The lease information to release.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.LeaseOperationResult">
            <summary>
            Represents the result of a lease-based operation.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.MethodRegistrationHelper">
            <summary>
            Helper class for registering methods using reflection.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.MethodRegistrationHelper.IsOrchestratorMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines if a method is an orchestrator based on its parameters.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.MethodRegistrationHelper.IsFunctionMethod(System.Reflection.MethodInfo)">
            <summary>
            Determines if a method is an activity based on its parameters.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.MethodRegistrationHelper.CreateOrchestratorDelegate(System.Reflection.MethodInfo,Asynkron.DurableFunctions.Core.IOrchestrationContext,System.String)">
            <summary>
            Creates an orchestrator delegate from a method using reflection.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.MethodRegistrationHelper.CreateFunctionDelegate(System.Reflection.MethodInfo,Asynkron.DurableFunctions.Core.IFunctionContext,System.String)">
            <summary>
            Creates an activity delegate from a method using reflection.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.ExecutionContext">
            <summary>
            Context passed to execution middleware when orchestrators or activities run.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.ExecutionKind">
            <summary>
            Identifies the type of durable component currently executing.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.IExecutionMiddleware">
            <summary>
            Middleware that can intercept orchestrator or activity execution.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.ISchedulingMiddleware">
            <summary>
            Middleware that can intercept durable state scheduling before persistence.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.SchedulingContext">
            <summary>
            Context passed to scheduling middleware before a durable state is persisted.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.Middleware.SchedulingSource">
            <summary>
            Indicates the operation that caused a durable state to be scheduled.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.OrchestrationClient">
            <summary>
            Default implementation of the orchestration client.
            Wraps the orchestration management service to provide a client-friendly interface.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.#ctor(Asynkron.DurableFunctions.Management.IOrchestrationManagementService)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Core.OrchestrationClient"/> class.
            </summary>
            <param name="managementService">The underlying orchestration management service.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.StartNewAsync(System.String,System.Object,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.GetStatusAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.RaiseEventAsync(System.String,System.String,System.Object,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.TerminateAsync(System.String,System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.OrchestrationClient.PurgeInstanceHistoryAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.OrchestrationContext">
            <summary>
            Default implementation of <see cref="T:Asynkron.DurableFunctions.Core.IOrchestrationContext"/> built on top of <see cref="T:Asynkron.DurableFunctions.Models.DurableState"/>.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Core.ParameterBinder">
            <summary>
            Handles parameter binding for method invocation in durable functions.
            Manages the complex logic of binding orchestration context, function context, and input parameters.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.PrepareOrchestratorInvocation(System.Reflection.MethodInfo,Asynkron.DurableFunctions.Core.IOrchestrationContext,System.String)">
            <summary>
            Prepares method invocation arguments for orchestrator methods.
            </summary>
            <param name="method">The method to prepare invocation for.</param>
            <param name="context">The orchestration context.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>A tuple containing the instance and prepared arguments.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.PrepareActivityInvocation(System.Reflection.MethodInfo,Asynkron.DurableFunctions.Core.IFunctionContext,System.String)">
            <summary>
            Prepares method invocation arguments for activity/function methods.
            </summary>
            <param name="method">The method to prepare invocation for.</param>
            <param name="context">The function context.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>A tuple containing the instance and prepared arguments.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.BindOrchestratorParameter(System.Reflection.ParameterInfo,Asynkron.DurableFunctions.Core.IOrchestrationContext,System.String)">
            <summary>
            Binds a parameter for orchestrator method invocation.
            </summary>
            <param name="parameter">The parameter to bind.</param>
            <param name="context">The orchestration context.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>The bound parameter value.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.BindActivityParameter(System.Reflection.ParameterInfo,Asynkron.DurableFunctions.Core.IFunctionContext,System.String)">
            <summary>
            Binds a parameter for activity method invocation.
            </summary>
            <param name="parameter">The parameter to bind.</param>
            <param name="context">The function context.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>The bound parameter value.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.BindInputParameter(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Binds an input parameter by deserializing or using default values.
            </summary>
            <param name="parameter">The parameter to bind.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>The bound parameter value.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.DeserializeInputForParameter(System.Reflection.ParameterInfo,System.String)">
            <summary>
            Deserializes input specifically for a parameter with FunctionTrigger attribute.
            </summary>
            <param name="parameter">The parameter to deserialize for.</param>
            <param name="input">The input data as JSON string.</param>
            <returns>The deserialized parameter value.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.CreateInstanceAndGetParameters(System.Reflection.MethodInfo)">
            <summary>
            Creates an instance of the declaring type if needed and gets method parameters.
            </summary>
            <param name="method">The method to analyze.</param>
            <returns>A tuple containing the instance (null for static) and parameters.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Core.ParameterBinder.GetDefaultValue(System.Type)">
            <summary>
            Gets the default value for a type.
            </summary>
            <param name="type">The type to get default value for.</param>
            <returns>Default value for the type.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException">
            <summary>
            Represents errors that occur during configuration validation.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException"/> class.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.ConfigurationException"/> class with a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException">
            <summary>
            Represents errors that occur during durable function execution.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.InstanceId">
            <summary>
            Gets the instance ID of the function where the error occurred.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.FunctionName">
            <summary>
            Gets the name of the function where the error occurred.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException"/> class.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException"/> class with a specified error message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException"/> class with a specified error message and a reference to the inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException"/> class with function context information.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="instanceId">The instance ID of the function where the error occurred.</param>
            <param name="functionName">The name of the function where the error occurred.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Exceptions.DurableFunctionException.#ctor(System.String,System.String,System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Exceptions.DurableFunctionException"/> class with function context information and inner exception.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="instanceId">The instance ID of the function where the error occurred.</param>
            <param name="functionName">The name of the function where the error occurred.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.RegisterOrchestrator``1(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.String,System.Func{Asynkron.DurableFunctions.Core.IOrchestrationContext,System.Threading.Tasks.Task{``0}})">
            <summary>
            Registers an orchestrator function with typed return value that can be executed by the runtime.
            Orchestrator functions receive a durable orchestration context and are automatically
            deleted from state when they complete successfully.
            </summary>
            <typeparam name="TResult">The return type of the orchestrator function.</typeparam>
            <param name="self"></param>
            <param name="functionName">The name of the orchestrator function.</param>
            <param name="orchestrator">The orchestrator function implementation.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.RegisterOrchestrator``2(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.String,System.Func{Asynkron.DurableFunctions.Core.IOrchestrationContext,``0,System.Threading.Tasks.Task{``1}})">
            <summary>
            Registers an orchestrator function with typed input and return value that can be executed by the runtime.
            Orchestrator functions receive a durable orchestration context and are automatically
            deleted from state when they complete successfully.
            </summary>
            <typeparam name="TIn">The input type of the orchestrator function.</typeparam>
            <typeparam name="TOut">The return type of the orchestrator function.</typeparam>
            <param name="self"></param>
            <param name="functionName">The name of the orchestrator function.</param>
            <param name="orchestrator">The orchestrator function implementation.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.TriggerAsyncObject(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.String,System.String,System.Object,System.Nullable{System.DateTimeOffset})">
            <summary>
            Triggers a durable function by creating state and storing it (backwards compatibility helper).
            </summary>
            <param name="self"></param>
            <param name="parentInstanceId"></param>
            <param name="functionName">The name of the function to trigger.</param>
            <param name="input">The input data for the function as an object (will be serialized to JSON).</param>
            <param name="executeAfter">When to execute the function. If null, executes immediately.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.RegisterOrchestratorFromMethod(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.Reflection.MethodInfo,System.String)">
            <summary>
            Registers an orchestrator from a method using reflection.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.RegisterFunctionFromMethod(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.Reflection.MethodInfo,System.String)">
            <summary>
            Registers an activity function from a method using reflection.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.ScanAssemblyForFunctions(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.Reflection.Assembly)">
            <summary>
            Scans the specified assembly for methods decorated with Function attribute and automatically registers them.
            </summary>
            <param name="self"></param>
            <param name="assembly">The assembly to scan for functions.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.ScanAndRegister(Asynkron.DurableFunctions.Core.DurableFunctionRuntime,System.Reflection.Assembly[])">
            <summary>
            Scans the specified assemblies for methods decorated with Function attribute and automatically registers them.
            </summary>
            <param name="self"></param>
            <param name="assemblies">The assemblies to scan for functions.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.CreateTestLoggerFactory(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Creates a preconfigured console logger factory for testing purposes.
            Provides consistent logging setup across all unit tests.
            </summary>
            <param name="minimumLogLevel">The minimum log level. Defaults to Warning to reduce test noise.</param>
            <returns>A configured LoggerFactory with console output optimized for testing.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.Extensions.CreateTestRuntime(Asynkron.DurableFunctions.Persistence.IStateStore,Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            Creates a DurableFunctionRuntime with a preconfigured test logger.
            This is a convenience method for unit tests to get consistent logging setup.
            </summary>
            <param name="stateStore">The state store for persisting function state.</param>
            <param name="minimumLogLevel">The minimum log level for the logger. Defaults to Warning.</param>
            <returns>A tuple containing the configured LoggerFactory and DurableFunctionRuntime.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Extensions.JsonFunctionDelegate">
            <summary>
            Represents a durable function that processes JSON input and produces JSON output asynchronously.
            Functions should be deterministic and idempotent as they may be called multiple times during replay scenarios.
            </summary>
            <param name="context">The function execution context providing access to logging and runtime services.</param>
            <param name="input">The JSON string input to process. May be null or empty depending on the function requirements.</param>
            <returns>A task that represents the asynchronous function execution. The task result contains the JSON output string.</returns>
            <example>
            <code>
            JsonFunctionDelegate processOrder = async (context, input) =>
            {
                var logger = context.GetLogger();
                logger.LogInformation($"Processing order: {input}");
                
                var order = JsonSerializer.Deserialize&lt;Order&gt;(input);
                // Process the order...
                var result = new OrderResult { Success = true, OrderId = order.Id };
                
                return JsonSerializer.Serialize(result);
            };
            </code>
            </example>
            <remarks>
            Functions must be stateless and should not have side effects that affect replay behavior.
            Use the provided context for logging and accessing runtime services.
            The input parameter contains the serialized data passed to the function.
            </remarks>
        </member>
        <member name="T:Asynkron.DurableFunctions.Extensions.JsonOrchestratorDelegate">
            <summary>
            Represents a durable orchestrator function that coordinates the execution of multiple activities and manages workflow state.
            Orchestrators must be deterministic and replay-safe to ensure consistent behavior across executions.
            </summary>
            <param name="context">The orchestration context providing access to durable operations like calling activities, creating timers, and waiting for events.</param>
            <param name="input">The JSON string input provided when the orchestration was started. May be null or empty.</param>
            <returns>A task that represents the asynchronous orchestration execution. The task result contains the final JSON output of the orchestration.</returns>
            <example>
            <code>
            JsonOrchestratorDelegate orderWorkflow = async (context, input) =>
            {
                var order = JsonSerializer.Deserialize&lt;Order&gt;(input);
                
                // Call activities in sequence
                var validationResult = await context.CallAsync&lt;string&gt;("ValidateOrder", JsonSerializer.Serialize(order));
                if (!bool.Parse(validationResult))
                {
                    return JsonSerializer.Serialize(new { Success = false, Reason = "Validation failed" });
                }
                
                var paymentResult = await context.CallAsync&lt;string&gt;("ProcessPayment", JsonSerializer.Serialize(order));
                var fulfillmentResult = await context.CallAsync&lt;string&gt;("FulfillOrder", paymentResult);
                
                return fulfillmentResult;
            };
            </code>
            </example>
            <remarks>
            Orchestrators must follow these rules for correct replay behavior:
            - Only interact with external systems through context methods (CallAsync, CreateTimer, WaitForEvent)
            - Do not use non-deterministic operations like DateTime.Now, Random, or network calls directly
            - Avoid accessing non-deterministic data or performing I/O operations outside of activities
            - Use the orchestration context for all durable operations to ensure proper state management
            
            Orchestrators are automatically deleted from storage upon successful completion unless a timer is set.
            </remarks>
        </member>
        <member name="T:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring Durable Functions services in a dependency injection container.
            These extensions provide convenient registration of runtime components with different storage backends.
            </summary>
            <example>
            <code>
            // Register with PostgreSQL storage
            services.AddDurableFunctionsWithPostgreSQL("Host=localhost;Database=durablefunctions", options =>
            {
                options.MaxConcurrentFunctionExecutions = 10;
                options.PollingIntervalMs = 1000;
            });
            
            // Add management API endpoints
            services.AddDurableFunctionsManagement(options =>
            {
                options.BaseUrl = "https://myapp.com";
            });
            </code>
            </example>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctionsManagement(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Asynkron.DurableFunctions.Extensions.DurableFunctionsManagementOptions})">
            <summary>
            Adds Durable Functions orchestration management services to the service collection.
            This includes the management service, orchestration client, and HTTP API controllers for managing orchestrations.
            </summary>
            <param name="services">The service collection to add services to. Cannot be null.</param>
            <param name="configure">Optional configuration action for customizing management service options.</param>
            <returns>The service collection for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> is null.</exception>
            <example>
            <code>
            services.AddDurableFunctionsManagement(options =>
            {
                options.BaseUrl = "https://myapp.com/api";
            });
            
            // Use in controller
            [ApiController]
            public class MyController : ControllerBase
            {
                private readonly IOrchestrationClient _client;
                
                public MyController(IOrchestrationClient client)
                {
                    _client = client;
                }
                
                [HttpPost("start")]
                public async Task&lt;IActionResult&gt; StartOrchestration(StartRequest request)
                {
                    await _client.StartOrchestrationAsync(request.Name, request.Input);
                    return Ok();
                }
            }
            </code>
            </example>
            <remarks>
            This method registers the following services:
            - IOrchestrationManagementService (scoped)
            - IOrchestrationClient (scoped)
            - MVC controllers with HTTP endpoints for orchestration management
            
            Requires that DurableFunctionRuntime is already registered in the service collection.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctionsManagementService(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String)">
            <summary>
            Adds minimal Durable Functions orchestration management services without HTTP controllers.
            Use this when you want to use the management service directly without the built-in HTTP endpoints.
            </summary>
            <param name="services">The service collection to add services to. Cannot be null.</param>
            <param name="baseUrl">Optional base URL for generating management URLs in responses. Defaults to empty string.</param>
            <returns>The service collection for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> is null.</exception>
            <example>
            <code>
            services.AddDurableFunctionsManagementService("https://myapp.com/api");
            
            // Use the management service directly
            public class MyService
            {
                private readonly IOrchestrationManagementService _management;
                
                public MyService(IOrchestrationManagementService management)
                {
                    _management = management;
                }
                
                public async Task StartWorkflow(string input)
                {
                    await _management.StartOrchestrationAsync("MyWorkflow", input);
                }
            }
            </code>
            </example>
            <remarks>
            This method registers the following services:
            - IOrchestrationManagementService (scoped)
            - IOrchestrationClient (scoped)
            
            Unlike AddDurableFunctionsManagement, this method does not register MVC controllers.
            Requires that DurableFunctionRuntime is already registered in the service collection.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctionsWithPostgreSQL(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions})">
            <summary>
            Adds Durable Functions runtime with PostgreSQL state store for production deployments.
            </summary>
            <param name="services">The service collection to add services to. Cannot be null.</param>
            <param name="connectionString">PostgreSQL connection string. Must be a valid connection string.</param>
            <param name="configure">Optional configuration action for customizing runtime options such as concurrency limits and polling intervals.</param>
            <returns>The service collection for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> or <paramref name="connectionString"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString"/> is empty or whitespace.</exception>
            <example>
            <code>
            services.AddDurableFunctionsWithPostgreSQL(
                "Host=localhost;Database=durablefunctions;Username=user;Password=pass",
                options =>
                {
                    options.MaxConcurrentFunctionExecutions = 50;
                    options.PollingIntervalMs = 2000;
                    options.UseCooperativeYield = true;
                });
            </code>
            </example>
            <remarks>
            This method registers:
            - PostgreSqlStateStore as IStateStore (singleton)
            - DurableFunctionRuntime (singleton)
            
            PostgreSQL provides production-ready durability and supports multi-host deployments with lease-based coordination.
            The connection string should include all necessary parameters for connecting to PostgreSQL.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctionsWithSQLite(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions})">
            <summary>
            Adds Durable Functions runtime with SQLite state store for single-node deployments and development.
            </summary>
            <param name="services">The service collection to add services to. Cannot be null.</param>
            <param name="connectionString">SQLite connection string. Can use file path or ":memory:" for in-memory database.</param>
            <param name="configure">Optional configuration action for customizing runtime options such as concurrency limits and polling intervals.</param>
            <returns>The service collection for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> or <paramref name="connectionString"/> is null.</exception>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString"/> is empty or whitespace.</exception>
            <example>
            <code>
            // File-based SQLite database
            services.AddDurableFunctionsWithSQLite(
                "Data Source=durablefunctions.db",
                options =>
                {
                    options.MaxConcurrentFunctionExecutions = 10;
                    options.PollingIntervalMs = 1000;
                });
                
            // In-memory SQLite database (for testing)
            services.AddDurableFunctionsWithSQLite("Data Source=:memory:");
            </code>
            </example>
            <remarks>
            This method registers:
            - SqliteStateStore as IStateStore (singleton)
            - DurableFunctionRuntime (singleton)
            
            SQLite provides good performance for single-node deployments and is ideal for development and testing.
            For production multi-host deployments, consider using PostgreSQL instead.
            The database schema will be automatically created if it doesn't exist.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctionsWithInMemory(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Asynkron.DurableFunctions.Core.DurableFunctionRuntimeOptions})">
            <summary>
            Adds Durable Functions runtime with in-memory state store for development and testing scenarios.
            </summary>
            <param name="services">The service collection to add services to. Cannot be null.</param>
            <param name="configure">Optional configuration action for customizing runtime options such as concurrency limits and polling intervals.</param>
            <returns>The service collection for fluent chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="services"/> is null.</exception>
            <example>
            <code>
            services.AddDurableFunctionsWithInMemory(options =>
            {
                options.MaxConcurrentFunctionExecutions = 5;
                options.PollingIntervalMs = 500;
                options.UseCooperativeYield = false; // Simpler execution for testing
            });
            </code>
            </example>
            <remarks>
            This method registers:
            - InMemoryStateStore as IStateStore (singleton)
            - DurableFunctionRuntime (singleton)
            
            ⚠️ WARNING: The in-memory state store does not persist data across application restarts.
            Use this only for development, testing, or scenarios where data loss is acceptable.
            For production deployments, use PostgreSQL or SQLite state stores instead.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Extensions.ServiceCollectionExtensions.AddDurableFunctions(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions})">
            <summary>
            Adds Durable Functions runtime with comprehensive configuration validation.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The configuration section containing Durable Functions options.</param>
            <param name="configure">Optional configuration action for additional options.</param>
            <returns>The service collection for fluent chaining.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Extensions.DurableFunctionsManagementOptions">
            <summary>
            Configuration options for Durable Functions management services.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Extensions.DurableFunctionsManagementOptions.BaseUrl">
            <summary>
            Gets or sets the base URL for generating management URLs in HTTP responses.
            This should be the public-facing base URL of your application for proper link generation.
            </summary>
            <value>
            The base URL string. Defaults to an empty string if not specified.
            </value>
            <example>
            <code>
            options.BaseUrl = "https://myapp.com/api";
            // Generated URLs will be: https://myapp.com/api/orchestrations/{instanceId}/status
            </code>
            </example>
            <remarks>
            When set, this URL is used to generate proper HTTP links in management API responses.
            If left empty, relative URLs will be generated instead.
            Include the protocol (http/https) and do not include a trailing slash.
            </remarks>
        </member>
        <member name="T:Asynkron.DurableFunctions.Health.ConfigurationValidationHealthCheck">
            <summary>
            Health check for configuration validation.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Health.ConfigurationValidationHealthCheck.#ctor(Microsoft.Extensions.Options.IOptions{Asynkron.DurableFunctions.Configuration.DurableFunctionsOptions})">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Health.ConfigurationValidationHealthCheck"/> class.
            </summary>
            <param name="options">The configuration options to validate.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Health.ConfigurationValidationHealthCheck.CheckHealthAsync(Microsoft.Extensions.Diagnostics.HealthChecks.HealthCheckContext,System.Threading.CancellationToken)">
            <summary>
            Checks the health of the configuration.
            </summary>
            <param name="context">The health check context.</param>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>A task representing the health check result.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Health.DurableFunctionsHealthCheck">
            <summary>
            Health check for Durable Functions runtime and state store connectivity.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.IOrchestrationManagementService">
            <summary>
            Service interface for managing orchestration instances.
            Provides operations for starting, querying, terminating, and managing orchestrations.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.StartOrchestrationAsync(System.String,Asynkron.DurableFunctions.Management.StartOrchestrationRequest,System.Threading.CancellationToken)">
            <summary>
            Starts a new orchestration instance.
            </summary>
            <param name="orchestratorName">The name of the orchestrator function to start.</param>
            <param name="request">The start orchestration request containing input and optional instance ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response containing the instance ID and management URLs.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.GetOrchestrationStatusAsync(System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Gets the status of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="showHistory">Whether to include execution history in the response.</param>
            <param name="showHistoryOutput">Whether to include output in the execution history.</param>
            <param name="showInput">Whether to include the input in the response.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The orchestration status, or null if not found.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.RaiseEventAsync(System.String,System.String,Asynkron.DurableFunctions.Management.RaiseEventRequest,System.Threading.CancellationToken)">
            <summary>
            Sends an external event to a running orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="eventName">The name of the event to send.</param>
            <param name="request">The event request containing the event data.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the async operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.TerminateOrchestrationAsync(System.String,Asynkron.DurableFunctions.Management.TerminateOrchestrationRequest,System.Threading.CancellationToken)">
            <summary>
            Terminates a running orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="request">The termination request containing the reason.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Task representing the async operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.PurgeInstanceHistoryAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Purges the history of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID of the orchestration.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response indicating the number of instances deleted.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.IOrchestrationManagementService.PurgeInstanceHistoryAsync(System.Nullable{System.DateTimeOffset},System.Nullable{System.DateTimeOffset},System.Collections.Generic.IEnumerable{Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus},System.Threading.CancellationToken)">
            <summary>
            Purges the history of multiple orchestration instances based on filter criteria.
            </summary>
            <param name="createdTimeFrom">Filter to instances created after this time.</param>
            <param name="createdTimeTo">Filter to instances created before this time.</param>
            <param name="runtimeStatus">Filter to instances with specific runtime status.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response indicating the number of instances deleted.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.StartOrchestrationRequest">
            <summary>
            Request model for starting a new orchestration instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.StartOrchestrationRequest.Input">
            <summary>
            The input data for the orchestration, as a JSON object.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.StartOrchestrationRequest.InstanceId">
            <summary>
            Optional custom instance ID. If not provided, one will be generated.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.StartOrchestrationResponse">
            <summary>
            Response model for starting a new orchestration instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.StartOrchestrationResponse.InstanceId">
            <summary>
            The unique instance ID of the started orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.StartOrchestrationResponse.ManagementUrls">
            <summary>
            Set of URLs for managing this orchestration instance.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.OrchestrationUrls">
            <summary>
            URLs for managing an orchestration instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationUrls.StatusQueryGetUri">
            <summary>
            URL to get the status of this orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationUrls.SendEventPostUri">
            <summary>
            URL to send external events to this orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationUrls.TerminatePostUri">
            <summary>
            URL to terminate this orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationUrls.PurgeHistoryDeleteUri">
            <summary>
            URL to purge the history of this orchestration.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.OrchestrationStatus">
            <summary>
            Status information for an orchestration instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.InstanceId">
            <summary>
            The unique instance ID.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.Name">
            <summary>
            The orchestration function name.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.RuntimeStatus">
            <summary>
            The current runtime status of the orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.Input">
            <summary>
            The input provided to the orchestration instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.Output">
            <summary>
            The output of the orchestration instance, if completed.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.CreatedTime">
            <summary>
            The time at which the orchestration was scheduled to execute.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.OrchestrationStatus.LastUpdatedTime">
            <summary>
            The time at which the orchestration was last updated.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus">
            <summary>
            The runtime status of an orchestration instance.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Running">
            <summary>
            The orchestration is running.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Completed">
            <summary>
            The orchestration completed successfully.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Failed">
            <summary>
            The orchestration failed with an unhandled exception.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Canceled">
            <summary>
            The orchestration was canceled.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Terminated">
            <summary>
            The orchestration was terminated.
            </summary>
        </member>
        <member name="F:Asynkron.DurableFunctions.Management.OrchestrationRuntimeStatus.Pending">
            <summary>
            The orchestration is pending (not yet started).
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.RaiseEventRequest">
            <summary>
            Request model for sending an external event to an orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.RaiseEventRequest.EventData">
            <summary>
            The event data to send to the orchestration.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.TerminateOrchestrationRequest">
            <summary>
            Request model for terminating an orchestration.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.TerminateOrchestrationRequest.Reason">
            <summary>
            The reason for terminating the orchestration.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.PurgeHistoryResponse">
            <summary>
            Response model for purge history operations.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Management.PurgeHistoryResponse.InstancesDeleted">
            <summary>
            The number of orchestration instances deleted.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.OrchestrationManagementService">
            <summary>
            Default implementation of the orchestration management service.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.PostgreSqlManagementExtensions">
            <summary>
            PostgreSQL-specific management extensions for advanced operations.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.PostgreSqlManagementExtensions.GetPostgreSqlMetricsAsync(Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore)">
            <summary>
            Gets PostgreSQL-specific performance metrics and statistics.
            </summary>
            <param name="stateStore">The PostgreSQL state store.</param>
            <returns>Performance metrics for the durable functions database.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.PostgreSqlManagementExtensions.CleanupCompletedInstancesAsync(Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore,System.TimeSpan,System.Int32)">
            <summary>
            Performs cleanup of old completed instances from PostgreSQL.
            </summary>
            <param name="stateStore">The PostgreSQL state store.</param>
            <param name="olderThan">Remove instances completed before this time.</param>
            <param name="batchSize">Maximum number of instances to remove in one batch.</param>
            <returns>Number of instances cleaned up.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.PostgreSqlManagementExtensions.PurgeInstanceHistoryAsync(Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore,System.String)">
            <summary>
            Purges the history for a specific orchestration instance from PostgreSQL storage.
            </summary>
            <param name="stateStore">The PostgreSQL state store instance.</param>
            <param name="instanceId">The orchestration instance ID to purge.</param>
            <returns>True if the instance was found and purged, false if not found.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Management.PostgreSqlManagementExtensions.ClearAllAsync(Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore,System.Threading.CancellationToken)">
            <summary>
            Clears all orchestration data from PostgreSQL storage.
            WARNING: This operation is irreversible and will delete ALL orchestration data.
            </summary>
            <param name="stateStore">The PostgreSQL state store instance.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
        </member>
        <member name="T:Asynkron.DurableFunctions.Management.PostgreSqlMetrics">
            <summary>
            PostgreSQL performance metrics for durable functions.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease">
            <summary>
            A disposable wrapper for OrchestratorLease that automatically releases the lease when disposed.
            Enables usage with 'await using' pattern for automatic lease cleanup.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.Lease">
            <summary>
            Gets the underlying orchestrator lease information.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.LeaseOwner">
            <summary>
            The unique identifier of the host that owns this lease.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.LeaseExpiresAt">
            <summary>
            The time when this lease expires. After this time, other hosts can claim the lease.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.Version">
            <summary>
            The version number used for optimistic concurrency control.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.#ctor(Asynkron.DurableFunctions.Models.OrchestratorLease,Asynkron.DurableFunctions.Persistence.IStateStore,System.String,System.String)">
            <summary>
            Initializes a new instance of the DisposableOrchestratorLease class.
            </summary>
            <param name="lease">The underlying orchestrator lease.</param>
            <param name="stateStore">The state store used for releasing the lease.</param>
            <param name="instanceId">The instance ID associated with the lease.</param>
            <param name="leaseOwner">The owner of the lease.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.IsExpired(System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines if this lease is expired.
            </summary>
            <param name="currentTime">The current time to compare against.</param>
            <returns>True if the lease has expired, false otherwise.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.IsOwnedBy(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines if this lease belongs to the specified owner and is still valid.
            </summary>
            <param name="owner">The owner to check.</param>
            <param name="currentTime">The current time to compare against.</param>
            <returns>True if the lease is owned by the specified owner and is still valid.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DisposableOrchestratorLease.DisposeAsync">
            <summary>
            Asynchronously releases the lease when the object is disposed.
            This method is called automatically when using 'await using' pattern.
            </summary>
            <returns>A task representing the asynchronous dispose operation.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.DurableState">
            <summary>
            Provides behavioral helpers for working with <see cref="T:Asynkron.DurableFunctions.Models.DurableStateDto"/>.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DurableState.#ctor(Asynkron.DurableFunctions.Models.DurableStateDto)">
            <summary>
            Provides behavioral helpers for working with <see cref="T:Asynkron.DurableFunctions.Models.DurableStateDto"/>.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.DurableStateDto">
            <summary>
            Plain durable state payload that is persisted in storage.
            Behavioural logic is provided by <see cref="T:Asynkron.DurableFunctions.Models.DurableState"/>.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.DurableValue">
            <summary>
            Represents the value stored in ActivityResults dictionary, containing status information and optional result.
            </summary>
            <param name="InitiatedAt">The timestamp when the activity was initially started.</param>
            <param name="Result">The optional result of the activity, null if not yet completed.</param>
            <param name="FunctionName">The name of the target function being executed.</param>
            <param name="Input">The raw input string passed to the function.</param>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DurableValue.#ctor(System.DateTimeOffset,System.String,System.String,System.String)">
            <summary>
            Represents the value stored in ActivityResults dictionary, containing status information and optional result.
            </summary>
            <param name="InitiatedAt">The timestamp when the activity was initially started.</param>
            <param name="Result">The optional result of the activity, null if not yet completed.</param>
            <param name="FunctionName">The name of the target function being executed.</param>
            <param name="Input">The raw input string passed to the function.</param>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DurableValue.InitiatedAt">
            <summary>The timestamp when the activity was initially started.</summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DurableValue.Result">
            <summary>The optional result of the activity, null if not yet completed.</summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DurableValue.FunctionName">
            <summary>The name of the target function being executed.</summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DurableValue.Input">
            <summary>The raw input string passed to the function.</summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.DurableValue.IsCompleted">
            <summary>
            Gets a value indicating whether this activity has completed successfully.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DurableValue.CreateInitiated(System.String,System.String)">
            <summary>
            Creates a new ActivationValue for a newly initiated activity.
            </summary>
            <param name="functionName">The name of the target function.</param>
            <param name="input">The raw input string.</param>
            <returns>A new ActivationValue with InitiatedAt set to current UTC time and no result.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.DurableValue.WithResult(System.String)">
            <summary>
            Creates a completed ActivationValue with the provided result.
            </summary>
            <param name="result">The serialized result of the activity execution.</param>
            <returns>A new ActivationValue with the result set.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.LeaseClaimResult">
            <summary>
            Represents the result of attempting to claim a lease for orchestrator execution.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.LeaseClaimResult.Success">
            <summary>
            Whether the lease was successfully claimed.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.LeaseClaimResult.State">
            <summary>
            The orchestrator state if the lease was successfully claimed, null otherwise.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.LeaseClaimResult.Lease">
            <summary>
            The lease information if the claim was successful.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.LeaseClaimResult.DisposableLease">
            <summary>
            The disposable lease information if the claim was successful.
            Use this property with 'await using' pattern for automatic lease cleanup.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.LeaseClaimResult.FailureReason">
            <summary>
            The reason why the lease claim failed, if applicable.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.LeaseClaimResult.CreateSuccess(Asynkron.DurableFunctions.Models.DurableStateDto,Asynkron.DurableFunctions.Models.OrchestratorLease)">
            <summary>
            Creates a successful lease claim result.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.LeaseClaimResult.CreateSuccess(Asynkron.DurableFunctions.Models.DurableStateDto,Asynkron.DurableFunctions.Models.OrchestratorLease,Asynkron.DurableFunctions.Models.DisposableOrchestratorLease)">
            <summary>
            Creates a successful lease claim result with disposable lease.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.LeaseClaimResult.CreateFailure(System.String)">
            <summary>
            Creates a failed lease claim result.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.OrchestratorLease">
            <summary>
            Represents a lease for orchestrator execution to prevent concurrent execution across multiple hosts.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.OrchestratorLease.LeaseOwner">
            <summary>
            The unique identifier of the host that owns this lease.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.OrchestratorLease.LeaseExpiresAt">
            <summary>
            The time when this lease expires. After this time, other hosts can claim the lease.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.OrchestratorLease.Version">
            <summary>
            The version number used for optimistic concurrency control.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.OrchestratorLease.Create(System.String,System.TimeSpan,System.Int64)">
            <summary>
            Creates a new lease for the specified owner with the given duration.
            </summary>
            <param name="owner">The unique identifier of the host claiming the lease.</param>
            <param name="leaseDuration">How long the lease should be valid.</param>
            <param name="currentVersion">The current version for optimistic concurrency.</param>
            <returns>A new OrchestratorLease instance.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.OrchestratorLease.IsExpired(System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines if this lease is expired.
            </summary>
            <param name="currentTime">The current time to compare against.</param>
            <returns>True if the lease has expired, false otherwise.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.OrchestratorLease.IsOwnedBy(System.String,System.Nullable{System.DateTimeOffset})">
            <summary>
            Determines if this lease belongs to the specified owner and is still valid.
            </summary>
            <param name="owner">The owner to check.</param>
            <param name="currentTime">The current time to compare against.</param>
            <returns>True if the lease is owned by the specified owner and is still valid.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Models.SchedulableInstance">
            <summary>
            Represents minimal information about a schedulable instance for efficient polling.
            Contains only the essential data needed to determine if an instance can be scheduled and claimed.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.InstanceId">
            <summary>
            The unique identifier of the durable function instance.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.ExecuteAfter">
            <summary>
            The time when this function should be executed.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.FunctionName">
            <summary>
            The name of the function to execute.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.Version">
            <summary>
            The current version for optimistic concurrency control.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.LeaseOwner">
            <summary>
            The current lease owner, if any.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Models.SchedulableInstance.LeaseExpiresAt">
            <summary>
            When the current lease expires, if any.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.SchedulableInstance.HasActiveLease(System.DateTimeOffset)">
            <summary>
            Gets a value indicating whether this instance has an active lease.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Models.SchedulableInstance.CanBeClaimed(System.String,System.DateTimeOffset)">
            <summary>
            Gets a value indicating whether this instance can be claimed by the specified lease owner.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Monitoring.DurableFunctionsMetrics">
            <summary>
            Provides OpenTelemetry metrics for Durable Functions operations.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Persistence.InMemoryStateStore">
            <summary>
            In-memory implementation of <see cref="T:Asynkron.DurableFunctions.Persistence.IStateStore"/> using concurrent collections with lease management.
            This implementation provides both basic state storage and concurrent-safe orchestrator execution for development and testing scenarios.
            </summary>
            <example>
            <code>
            var stateStore = new InMemoryStateStore();
            var runtime = new DurableFunctionRuntime(stateStore, logger);
            
            // Register and run functions
            runtime.RegisterJsonFunction("MyFunction", async (context, input) => "Hello World");
            await runtime.TriggerAsync("instance1", "MyFunction");
            await runtime.RunAndPollAsync(cancellationToken);
            </code>
            </example>
            <remarks>
            ⚠️ WARNING: This implementation stores all data in memory and does not persist across application restarts.
            Use this implementation only for:
            - Development and testing scenarios
            - Temporary workflows where data loss is acceptable
            - Performance testing and benchmarking
            
            For production deployments, use <see cref="T:Asynkron.DurableFunctions.Persistence.SqliteStateStore"/> or <see cref="T:Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore"/> instead.
            
            The implementation is thread-safe and supports concurrent access from multiple threads.
            Lease management ensures only one host can execute a given orchestrator at a time.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.SaveStateAsync(Asynkron.DurableFunctions.Models.DurableStateDto)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.GetStateAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.GetReadyStatesAsync(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.RemoveStateAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.TryClaimLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.TryClaimDisposableLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.RenewLeaseAsync(System.String,System.String,System.TimeSpan,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.ReleaseLeaseAsync(System.String,System.String,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.GetReadyClaimableInstanceIdsAsync(System.DateTimeOffset,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.GetStateForClaimedInstanceAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.GetReadyInstanceStreamAsync(System.DateTimeOffset,System.String,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.Count">
            <summary>
            Gets the current count of states in the store.
            </summary>
        </member>
        <member name="P:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.LeaseCount">
            <summary>
            Gets the current count of active leases in the store.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.InMemoryStateStore.Clear">
            <summary>
            Clears all states and leases from the store.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Persistence.IStateStore">
            <summary>
            Defines the unified interface for storing and retrieving durable function state with concurrent orchestrator execution support.
            This interface provides both basic state storage and concurrency-safe orchestrator execution,
            ensuring only one host can execute a given orchestrator at a time through lease management.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.SaveStateAsync(Asynkron.DurableFunctions.Models.DurableStateDto)">
            <summary>
            Stores or updates a durable function state.
            </summary>
            <param name="stateDto">The state to store.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.GetStateAsync(System.String)">
            <summary>
            Retrieves a durable function state by its instance ID.
            </summary>
            <param name="instanceId">The instance ID of the state.</param>
            <returns>A task representing the asynchronous operation. The task result contains the state if found, otherwise null.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.RemoveStateAsync(System.String)">
            <summary>
            Removes a durable function state by its instance ID.
            </summary>
            <param name="instanceId">The instance ID of the state to remove.</param>
            <returns>A task representing the asynchronous operation.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.TryClaimLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <summary>
            Attempts to claim a lease for executing a specific orchestrator instance.
            Uses optimistic concurrency control (Compare-And-Swap) with lease-based safety.
            </summary>
            <param name="instanceId">The instance ID of the orchestrator to claim.</param>
            <param name="leaseOwner">The unique identifier of the host claiming the lease.</param>
            <param name="leaseDuration">How long the lease should be valid.</param>
            <param name="currentTime">The current time for lease expiration calculations.</param>
            <returns>A lease claim result indicating success or failure with details.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.TryClaimDisposableLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <summary>
            Attempts to claim a disposable lease for executing a specific orchestrator instance.
            Uses optimistic concurrency control (Compare-And-Swap) with lease-based safety.
            The returned lease will automatically release when disposed using 'await using' pattern.
            </summary>
            <param name="instanceId">The instance ID of the orchestrator to claim.</param>
            <param name="leaseOwner">The unique identifier of the host claiming the lease.</param>
            <param name="leaseDuration">How long the lease should be valid.</param>
            <param name="currentTime">The current time for lease expiration calculations.</param>
            <returns>A lease claim result indicating success or failure with disposable lease for automatic cleanup.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.RenewLeaseAsync(System.String,System.String,System.TimeSpan,System.Int64)">
            <summary>
            Renews an existing lease for an orchestrator instance.
            This should be called periodically during long-running orchestrator executions.
            </summary>
            <param name="instanceId">The instance ID of the orchestrator.</param>
            <param name="leaseOwner">The current owner of the lease.</param>
            <param name="leaseDuration">The new lease duration.</param>
            <param name="expectedVersion">The expected version for optimistic concurrency control.</param>
            <returns>True if the lease was successfully renewed, false otherwise.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.ReleaseLeaseAsync(System.String,System.String,System.Int64)">
            <summary>
            Releases a lease for an orchestrator instance.
            This should be called when orchestrator execution completes or fails.
            </summary>
            <param name="instanceId">The instance ID of the orchestrator.</param>
            <param name="leaseOwner">The current owner of the lease.</param>
            <param name="expectedVersion">The expected version for optimistic concurrency control.</param>
            <returns>True if the lease was successfully released, false otherwise.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.GetStateForClaimedInstanceAsync(System.String)">
            <summary>
            Gets the full state for a specific instance, typically after successfully claiming a lease.
            This method should be called only after using GetReadyClaimableInstanceIdsAsync and successfully
            claiming a lease for the instance.
            </summary>
            <param name="instanceId">The instance ID to retrieve the full state for.</param>
            <returns>The full durable state for the instance, or null if not found.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.IStateStore.GetReadyInstanceStreamAsync(System.DateTimeOffset,System.String,System.Threading.CancellationToken,System.Int32)">
            <summary>
            Gets a stream of instance IDs that are ready to be scheduled.
            This method returns an async enumerable that allows immediate scheduling 
            as soon as new IDs are ready, rather than scheduling in batches.
            </summary>
            <param name="currentTime">The current time to compare against ExecuteAfter and lease expiration.</param>
            <param name="leaseOwner">The unique identifier of the requesting host.</param>
            <param name="cancellationToken">Token to cancel the enumeration.</param>
            <param name="pollingIntervalMs">The polling interval in milliseconds when no work is available.</param>
            <returns>An async enumerable of schedulable instance information.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore">
            <summary>
            PostgreSQL implementation of <see cref="T:Asynkron.DurableFunctions.Persistence.IStateStore"/> for persistent, distributed storage of durable function state.
            Provides enterprise-grade durability with concurrent orchestrator execution support using optimistic concurrency control and lease-based safety.
            </summary>
            <example>
            <code>
            // Basic PostgreSQL setup
            var connectionString = "Host=localhost;Database=durablefunctions;Username=user;Password=pass";
            var stateStore = new PostgreSqlStateStore(connectionString, logger);
            var runtime = new DurableFunctionRuntime(stateStore, logger);
            
            // With connection pooling (recommended for production)
            var pooledConnectionString = "Host=localhost;Database=durablefunctions;Username=user;Password=pass;Pooling=true;MinPoolSize=5;MaxPoolSize=20";
            var productionStore = new PostgreSqlStateStore(pooledConnectionString, logger);
            
            // Using with dependency injection
            services.AddDurableFunctionsWithPostgreSQL(connectionString, options =>
            {
                options.MaxConcurrentFunctionExecutions = 50;
            });
            </code>
            </example>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore.CreateConnectionAsync">
            <summary>
            Creates a new database connection for management operations.
            This method is intended for use by management extensions.
            </summary>
            <returns>A new NpgsqlConnection instance.</returns>
        </member>
        <member name="T:Asynkron.DurableFunctions.Persistence.SqliteStateStore">
            <summary>
            SQLite implementation of <see cref="T:Asynkron.DurableFunctions.Persistence.IStateStore"/> for persistent storage of durable function state.
            Provides production-ready durability with concurrent orchestrator execution support using optimistic concurrency control and lease-based safety.
            </summary>
            <example>
            <code>
            // File-based SQLite database for persistence
            var stateStore = new SqliteStateStore("Data Source=durablefunctions.db", logger);
            var runtime = new DurableFunctionRuntime(stateStore, logger);
            
            // In-memory SQLite database for testing
            var testStateStore = new SqliteStateStore("Data Source=:memory:", testLogger);
            
            // Using with dependency injection
            services.AddDurableFunctionsWithSQLite("Data Source=app.db");
            </code>
            </example>
            <remarks>
            SQLite provides excellent performance for single-node deployments and is ideal for:
            - Production single-instance applications
            - Development and testing environments
            - Edge computing scenarios
            - Desktop applications with durable workflows
            
            Features:
            - Automatic database schema creation and migration
            - ACID transactions for data consistency
            - Optimistic concurrency control with version tracking  
            - Lease-based coordination for safe orchestrator execution
            - Support for both file and in-memory databases
            - Connection pooling and automatic retry handling
            
            For multi-host distributed deployments, consider using <see cref="T:Asynkron.DurableFunctions.Persistence.PostgreSqlStateStore"/> instead.
            The database schema is automatically created if it doesn't exist.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Asynkron.DurableFunctions.Persistence.SqliteStateStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Persistence.SqliteStateStore"/> class with a connection string.
            The database schema will be automatically created if it doesn't exist.
            </summary>
            <param name="connectionString">The SQLite connection string. Use "Data Source=:memory:" for in-memory database or file paths for persistent storage.</param>
            <param name="logger">Optional logger for debugging, monitoring, and error tracking.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="connectionString"/> is null, empty, or whitespace.</exception>
            <example>
            <code>
            // File-based database
            var fileStore = new SqliteStateStore("Data Source=./data/workflows.db", logger);
            
            // In-memory database (for testing)
            var memoryStore = new SqliteStateStore("Data Source=:memory:", logger);
            
            // With additional connection parameters
            var configuredStore = new SqliteStateStore("Data Source=app.db;Cache=Shared;", logger);
            </code>
            </example>
            <remarks>
            For in-memory databases, an anchor connection is maintained to prevent data loss when connections are closed.
            The connection string is automatically converted to use shared cache for in-memory databases to enable proper isolation.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.#ctor(Microsoft.Data.Sqlite.SqliteConnection,Microsoft.Extensions.Logging.ILogger{Asynkron.DurableFunctions.Persistence.SqliteStateStore})">
            <summary>
            Initializes a new instance of the <see cref="T:Asynkron.DurableFunctions.Persistence.SqliteStateStore"/> class with an existing connection.
            </summary>
            <param name="existingConnection">An existing SQLite connection. The connection string will be extracted for creating additional connections as needed.</param>
            <param name="logger">Optional logger for debugging, monitoring, and error tracking.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when <paramref name="existingConnection"/> is null.</exception>
            <example>
            <code>
            using var connection = new SqliteConnection("Data Source=workflows.db");
            connection.Open();
            var stateStore = new SqliteStateStore(connection, logger);
            </code>
            </example>
            <remarks>
            This constructor extracts the connection string from the provided connection and uses it to create additional connections as needed.
            For in-memory databases, the provided connection may be kept open as an anchor to prevent data loss.
            The database schema will be automatically created if it doesn't exist.
            </remarks>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.OpenConnection">
            <summary>
            Creates a new connection for each operation to avoid concurrent access issues.
            </summary>
            <returns>A new opened SqliteConnection.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.IsInMemoryDatabase(System.String)">
            <summary>
            Checks if the connection string represents an in-memory database.
            </summary>
            <param name="connectionString">The connection string to check.</param>
            <returns>True if it's an in-memory database, false otherwise.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.ConvertToSharedCacheIfInMemory(System.String)">
            <summary>
            Converts simple in-memory connection strings to use shared cache for per-operation connections.
            </summary>
            <param name="connectionString">The original connection string.</param>
            <returns>The converted connection string with shared cache if it's in-memory.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.SaveStateAsync(Asynkron.DurableFunctions.Models.DurableStateDto)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetStateAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetReadyStatesAsync(System.DateTimeOffset)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.RemoveStateAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.TryClaimLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.TryClaimDisposableLeaseAsync(System.String,System.String,System.TimeSpan,System.Nullable{System.DateTimeOffset})">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.RenewLeaseAsync(System.String,System.String,System.TimeSpan,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.ReleaseLeaseAsync(System.String,System.String,System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetReadyClaimableStatesAsync(System.DateTimeOffset,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetReadyClaimableInstanceIdsAsync(System.DateTimeOffset,System.String,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetStateForClaimedInstanceAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetReadyInstanceStreamAsync(System.DateTimeOffset,System.String,System.Threading.CancellationToken,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.GetCountAsync">
            <summary>
            Gets the total count of states in the store.
            </summary>
            <returns>The number of states currently stored.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.ClearAsync">
            <summary>
            Clears all states from the store.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Persistence.SqliteStateStore.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:Asynkron.DurableFunctions.Web.Middleware.DurableTraceContextMiddleware">
            <summary>
            ASP.NET Core middleware that ensures incoming W3C trace headers are applied to the current activity
            so Durable Functions can persist the correct trace metadata.
            </summary>
        </member>
        <member name="T:Asynkron.DurableFunctions.Web.OrchestrationController">
            <summary>
            HTTP API controller for managing orchestration instances.
            Provides built-in endpoints for starting, querying, terminating, and managing orchestrations.
            </summary>
        </member>
        <member name="M:Asynkron.DurableFunctions.Web.OrchestrationController.StartOrchestration(System.String,Asynkron.DurableFunctions.Management.StartOrchestrationRequest,System.Threading.CancellationToken)">
            <summary>
            Start a new orchestration instance.
            </summary>
            <param name="orchestratorName">The name of the orchestrator function to start.</param>
            <param name="request">The start orchestration request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response with instance ID and management URLs.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Web.OrchestrationController.GetOrchestrationStatus(System.String,System.Boolean,System.Boolean,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Get the status of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID.</param>
            <param name="showHistory">Whether to include execution history.</param>
            <param name="showHistoryOutput">Whether to include output in execution history.</param>
            <param name="showInput">Whether to include input in the response.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>The orchestration status.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Web.OrchestrationController.RaiseEvent(System.String,System.String,Asynkron.DurableFunctions.Management.RaiseEventRequest,System.Threading.CancellationToken)">
            <summary>
            Send an external event to an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID.</param>
            <param name="eventName">The name of the event to send.</param>
            <param name="request">The event request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Success response.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Web.OrchestrationController.TerminateOrchestration(System.String,Asynkron.DurableFunctions.Management.TerminateOrchestrationRequest,System.Threading.CancellationToken)">
            <summary>
            Terminate a running orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID.</param>
            <param name="request">The termination request.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Success response.</returns>
        </member>
        <member name="M:Asynkron.DurableFunctions.Web.OrchestrationController.PurgeInstanceHistory(System.String,System.Threading.CancellationToken)">
            <summary>
            Purge the history of an orchestration instance.
            </summary>
            <param name="instanceId">The unique instance ID.</param>
            <param name="cancellationToken">Cancellation token.</param>
            <returns>Response indicating the number of instances deleted.</returns>
        </member>
    </members>
</doc>
